{"version":3,"sources":["assets/logo.svg","features/Search/searchTermSlice.js","features/Search/SearchTerm.js","components/Header.js","api/urls.js","features/Comment/Comment.js","api/reddit.js","features/Comment/commentsSlice.js","components/Comments.js","features/Post/Post.js","assets/helpers.js","features/Post/postsSlice.js","components/PostsList.js","app/routes.js","components/Main.js","app/App.js","app/store.js","serviceWorker.js","index.js"],"names":["searchTermSlice","createSlice","name","initialState","searchTerm","reducers","setSearchTerm","state","action","payload","selectSearchTerm","actions","SearchTerm","dispatch","useDispatch","useSelector","Row","className","Col","id","value","onChange","e","text","target","placeholder","Button","variant","onClick","Header","src","logo","alt","URLS","popular","gaming","trashy","base","styles","margin","Comment","comment","kind","style","dangerouslySetInnerHTML","__html","htmlDecode","data","body_html","fetchPosts","postName","a","fetch","json","fetchComments","commentsURL","loadComments","createAsyncThunk","commentsSlice","comments","isLoadingComments","commentsFailed","extraReducers","builder","addCase","pending","fulfilled","articleId","children","commentCount","length","count","visible","rejected","selectComments","Comments","article","loadingComments","loadingCommentsFailed","useState","setVisible","useEffect","permalink","slice","Spinner","animation","size","Card","Text","ListGroup","map","Item","Post","subR","title","hasImg","undefined","preview","isHTML","Body","Title","Img","maxWidth","maxHeight","images","source","url","replace","Subtitle","ups","input","document","createElement","innerHTML","childNodes","nodeValue","str","c","i","nodeType","createPostJSX","post","changeTerm","subreddit","selftext_html","highlightSearchText","RegExp","loadPosts","postsSlice","articles","isLoadingPosts","postsFailed","posts","selectPosts","layout","PostList","md","span","order","PostsList","match","postsLoading","path","keyWord","toLowerCase","includes","selftext","filterBySearch","ROUTES","Main","SideBar","exact","component","NavSubs","Nav","as","to","App","Container","middleware","getDefaultMiddleware","serializableCheck","store","configureStore","reducer","postsReducer","commentsReducer","searchTermReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72994611.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {searchTerm: ''};\r\n\r\nexport const searchTermSlice = createSlice({\r\n    name: 'searchTerm',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setSearchTerm(state, action) {\r\n            state.searchTerm = action.payload;\r\n        }\r\n    },\r\n});\r\n\r\nexport const selectSearchTerm = state => state.searchTerm.searchTerm;\r\nexport const { setSearchTerm } = searchTermSlice.actions;\r\nexport default searchTermSlice.reducer;","import { useDispatch, useSelector } from 'react-redux';\r\nimport { selectSearchTerm, setSearchTerm } from './searchTermSlice';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\nexport default function SearchTerm() {\r\n    const dispatch = useDispatch();\r\n    const searchTerm = useSelector(selectSearchTerm);\r\n\r\n    function onChangeHandler(e) {\r\n        const text = e.target.value;\r\n        dispatch(setSearchTerm(text))\r\n    }\r\n    \r\n    function clearSearchText() {\r\n        dispatch(setSearchTerm(''))\r\n    }\r\n\r\n    return (\r\n        <Row className=\"search-bar\">\r\n            <Col>\r\n                <input\r\n                    id=\"search-input\"\r\n                    value={searchTerm} \r\n                    name=\"searchText\"\r\n                    onChange={onChangeHandler}\r\n                    placeholder=\"search\"\r\n                />\r\n            </Col>\r\n            <Col>\r\n                <Button className=\"clear-search\" variant=\"secondary\" onClick={clearSearchText}>Clear</Button>\r\n            </Col>\r\n        </Row>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport logo from '../assets/logo.svg';\r\nimport '../assets/App.css';\r\nimport SearchTerm from '../features/Search/SearchTerm';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <Row className=\"w-100 align-items-center\">\r\n                <Col>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                </Col>\r\n                <Col>\r\n                    <SearchTerm />\r\n                </Col>\r\n            </Row>\r\n        </header>\r\n    );\r\n}","const URLS = {\r\n    popular: 'https://www.reddit.com/r/popular.json',\r\n    gaming:  'https://www.reddit.com/r/gaming.json',\r\n    trashy:  'https://www.reddit.com/r/trashy.json',\r\n    base:    'https://www.reddit.com/r',\r\n};\r\n  \r\nexport default URLS;","import React from 'react';\r\nimport { htmlDecode } from '../../assets/helpers';\r\n\r\nconst styles = {\r\n    margin: '10px 10px 0 10px',\r\n};\r\n\r\nexport default function Comment({comment}) {\r\n    \r\n    if(comment.kind === 't1') {\r\n        return <div \r\n                    style={styles} \r\n                    dangerouslySetInnerHTML={{ __html: htmlDecode(comment.data.body_html) }} \r\n                />\r\n    } \r\n\r\n    return null;\r\n}","import URLS from \"./urls\";\r\n\r\nexport const fetchPosts = async (postName) => {\r\n    const data = await fetch(URLS.base + postName + '.json');\r\n    const json = await data.json();\r\n    \r\n    return json;\r\n}\r\n\r\nexport const fetchComments = async (commentsURL) => {\r\n    const data = await fetch(commentsURL);\r\n    const json = await data.json();\r\n\r\n    return json;\r\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchComments } from '../../api/reddit';\r\n\r\nconst initialState = {\r\n    comments: {},\r\n    isLoadingComments: false,\r\n    commentsFailed: false,\r\n};\r\n\r\nexport const loadComments = createAsyncThunk(\r\n    'comments/loadComments',\r\n    async (commentsURL) => {\r\n        const json = await fetchComments(commentsURL)\r\n        \r\n        return json;\r\n    }\r\n);\r\n\r\nconst commentsSlice =  createSlice({\r\n    name: 'comments',\r\n    initialState: initialState,\r\n    extraReducers: (builder) => {\r\n        builder\r\n        .addCase(loadComments.pending, (state) => {\r\n            state.isLoadingComments = true;\r\n            state.commentsFailed = false;\r\n        })\r\n        .addCase(loadComments.fulfilled, (state, action) => {\r\n            state.isLoadingComments = false;\r\n            state.commentsFailed = false;\r\n            \r\n            const articleId = action.payload[0].data.children[0].data.id;\r\n            const comments = action.payload[1].data.children;\r\n            const commentCount = comments.length;\r\n            state.comments[articleId] = {comments: comments, count: commentCount, visible: false};\r\n             \r\n        })\r\n        .addCase(loadComments.rejected, (state) => {\r\n            state.isLoadingComments = false;\r\n            state.commentsFailed = true;\r\n        })\r\n    }\r\n});\r\n\r\nexport const selectComments = state => state.comments.comments;\r\nexport const isLoadingComments = state => state.comments.isLoadingComments;\r\nexport const commentsFailed = state => state.comments.commentsFailed;\r\nexport default commentsSlice.reducer;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport URLS from '../api/urls';\r\nimport Comment from '../features/Comment/Comment';\r\nimport { commentsFailed, isLoadingComments, loadComments, selectComments } from '../features/Comment/commentsSlice';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nexport default function Comments({article}) {\r\n    const dispatch = useDispatch();\r\n    const comments = useSelector(selectComments);\r\n    const loadingComments = useSelector(isLoadingComments);\r\n    const loadingCommentsFailed = useSelector(commentsFailed);\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let commentsURL = article.permalink.slice(0, -1);\r\n        commentsURL = URLS.base.slice(0, -2) + commentsURL + '.json';\r\n        \r\n        dispatch(loadComments(commentsURL));\r\n    }, [dispatch, article]);\r\n\r\n    function onClickHandler() {\r\n        setVisible(!visible);\r\n   }\r\n\r\n    if (loadingComments || !comments[article.id]) {\r\n        return  <>\r\n                    <h6>Comments...</h6> \r\n                    <Spinner animation=\"border\" variant=\"secondary\" size=\"sm\"/>\r\n                </>;\r\n    } else if (loadingCommentsFailed ) {\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Card.Text>\r\n                <Button onClick={onClickHandler} variant=\"primary\">\r\n                    <div>Comments [{comments[article.id].count}]</div>\r\n                </Button>\r\n            </Card.Text>\r\n            {visible && \r\n                <ListGroup className=\"text-md-justify\">\r\n                    {comments[article.id].comments.map(comment => \r\n                            <ListGroup.Item key={comment.data.id} >\r\n                                <Comment comment={comment} />\r\n                            </ListGroup.Item>\r\n                    )}\r\n                </ListGroup>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport { htmlDecode, isHTML } from '../../assets/helpers';\r\nimport Comments from '../../components/Comments';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\nexport default function Post({subR, title, text, article}) {\r\n    const styles = {\r\n        img: {maxWidth: '80vh', maxHeight: '80vh'}\r\n    }\r\n    const hasImg = article.preview !== undefined ? true : false;\r\n\r\n    return (\r\n        <Card key={article.id}>\r\n            <Card.Header>\r\n                {   isHTML(subR)?\r\n                    <div dangerouslySetInnerHTML={{__html: subR}} /> :\r\n                    <div>{subR}</div>\r\n                }\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Card.Title>\r\n                    {   isHTML(title)?\r\n                        <div dangerouslySetInnerHTML={{__html: title}} /> :\r\n                        <div>{title}</div>\r\n                    }\r\n                </Card.Title>\r\n                {hasImg &&  \r\n                    <Card.Img\r\n                        style={styles.img}\r\n                        variant=\"top\" \r\n                        src={article.preview.images[0].source.url.replace('amp;s', 's').replace('&amp;', '&')} \r\n                        alt=\"article preview\"\r\n                    />\r\n                }\r\n                <Card.Text className=\"text-center\">\r\n                    {   isHTML(text)?\r\n                        <div dangerouslySetInnerHTML={{__html: htmlDecode(text)}} /> :\r\n                        <div dangerouslySetInnerHTML={{__html: htmlDecode(text)}} />\r\n                    }\r\n                </Card.Text>\r\n                <Card.Body>\r\n                    <Comments article={article}/>\r\n                </Card.Body>\r\n                <Card.Subtitle>\r\n                    <div>Ups: {article.ups}</div>\r\n                </Card.Subtitle>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}","import Post from '../features/Post/Post';\r\n\r\nexport function htmlDecode(input){\r\n    var e = document.createElement('div');\r\n    e.innerHTML = input;\r\n    return e.childNodes.length === 0 ? \"\" : e.childNodes[0].nodeValue;\r\n  }\r\n\r\nexport  function isHTML(str) {\r\n    var a = document.createElement('div');\r\n    a.innerHTML = str;\r\n  \r\n    for (var c = a.childNodes, i = c.length; i--; ) {\r\n      if (c[i].nodeType === 1) return true; \r\n    }\r\n  \r\n    return false;\r\n  }\r\n\r\n  export function filterBySearch(post, searchTerm) {\r\n\r\n    if(searchTerm === '') return createPostJSX(post, searchTerm, 'default');\r\n    \r\n    const keyWord = searchTerm.toLowerCase();\r\n    const postTitle = post.data.title.toLowerCase();\r\n    const inTitle = postTitle.includes(keyWord);\r\n    \r\n    if(inTitle) return createPostJSX(post, searchTerm, 'Title');\r\n    \r\n    const subreddit = post.data.subreddit.toLowerCase();\r\n    const inSubreddit = subreddit.includes(keyWord);\r\n    \r\n    if(inSubreddit) return createPostJSX(post, searchTerm, 'Subreddit');\r\n    \r\n    const postText = post.data.selftext.toLowerCase();\r\n    const inText = postText.includes(keyWord);\r\n    \r\n    if(inText) return createPostJSX(post, searchTerm, 'Text');\r\n    \r\n    return null;\r\n}\r\n\r\nexport function createPostJSX(post, searchTerm, changeTerm) {\r\n   let title = post.data.title;\r\n   let subR = post.data.subreddit;\r\n   let text = post.data.selftext_html;\r\n\r\n    switch (changeTerm) {\r\n        case 'Title':\r\n            title = highlightSearchText(post.data.title, searchTerm);\r\n            break;\r\n        \r\n        case 'Subreddit':\r\n            subR = highlightSearchText(post.data.subreddit, searchTerm);\r\n            break;\r\n        \r\n        case 'Text':\r\n            text = highlightSearchText(post.data.selftext_html, searchTerm);\r\n            break;\r\n    \r\n        default:\r\n            break;\r\n    }\r\n    \r\n    return (\r\n        <div key={post.data.id}>\r\n            <Post subR={subR} title={title} text={text} article={post.data}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function highlightSearchText(text, searchTerm) {\r\n  return text.replace(new RegExp(searchTerm,'i'), '<span id=\"mark\">$&</span>' );\r\n}","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { fetchPosts } from \"../../api/reddit\";\r\n\r\nconst initialState = {\r\n    articles: [],\r\n    isLoadingPosts: false,\r\n    postsFailed: false,\r\n};\r\n\r\nexport const loadPosts = createAsyncThunk(\r\n    'posts/loadPosts',\r\n    async (postName) => {\r\n        const json = await fetchPosts(postName)\r\n        return json;\r\n    }\r\n);\r\n\r\nexport const postsSlice = createSlice({ \r\n    name: 'posts',\r\n    initialState: initialState,\r\n    extraReducers: (builder) => {\r\n        builder\r\n        .addCase(loadPosts.pending, (state) => {\r\n            state.isLoadingPosts = true;\r\n            state.postsFailed = false;\r\n        })\r\n        .addCase(loadPosts.fulfilled, (state, action) => {\r\n            const posts = action.payload.data.children;\r\n            state.articles = posts;\r\n            state.isLoadingPosts = false;\r\n            state.postsFailed = false;\r\n        })\r\n        .addCase(loadPosts.rejected, (state) => {\r\n            state.isLoadingPosts = false;\r\n            state.postsFailed = true;\r\n        })\r\n    }\r\n});\r\n\r\nexport const selectPosts = state => state.posts.articles;\r\nexport const isLoadingPosts = state => state.posts.isLoadingPosts;\r\nexport default postsSlice.reducer;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { filterBySearch } from '../assets/helpers';\r\nimport { isLoadingPosts, loadPosts, selectPosts } from '../features/Post/postsSlice';\r\nimport { selectSearchTerm, setSearchTerm } from '../features/Search/searchTermSlice';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst layout = {\r\n    PostList: {\r\n        md: { span: 9, order: 'first' }\r\n    }\r\n}\r\n\r\nexport default function PostsList({match}) {\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector(selectPosts);\r\n    const postsLoading = useSelector(isLoadingPosts);\r\n    const searchTerm = useSelector(selectSearchTerm);\r\n    \r\n    if(match.path === '/') {\r\n        match.path = '/popular';\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(loadPosts(match.path));\r\n        dispatch(setSearchTerm(''));\r\n    }, [dispatch, match]);\r\n\r\n    if(postsLoading) {\r\n        return <Col md={layout.PostList.md}>\r\n                    <h2>Loading...</h2> \r\n                    <Spinner animation=\"border\" variant=\"secondary\" />\r\n                </Col>\r\n    }\r\n\r\n    return (\r\n            <Col md={layout.PostList.md}>\r\n                {posts.map(post => filterBySearch(post, searchTerm))}\r\n            </Col>\r\n        );\r\n}\r\n","const ROUTES = {\r\n    popular: '/popular',\r\n    gaming:  '/gaming',\r\n    trashy:  '/trashy',\r\n};\r\n  \r\nexport default ROUTES;","import React from 'react';\r\nimport PostsList from './PostsList';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n  } from 'react-router-dom';\r\nimport ROUTES from '../app/routes';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Card from 'react-bootstrap/Card';\r\nimport '../assets/Main.css';\r\n\r\nexport default function Main() {\r\n    return (  \r\n        <main>\r\n            <Row>\r\n                <SideBar />\r\n                <Switch>\r\n                    <Route exact path='/' component={PostsList} />\r\n                    <Route path ={ROUTES.popular} component={PostsList} />\r\n                    <Route path ={ROUTES.gaming} component={PostsList} />\r\n                    <Route path ={ROUTES.trashy} component={PostsList} /> \r\n                </Switch>\r\n            </Row>\r\n        </main>  \r\n    );\r\n}\r\n\r\n\r\nfunction SideBar() {\r\n    return (\r\n        <Col>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Card.Title><h5>Subreddits:</h5></Card.Title>\r\n                    <NavSubs />\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n\r\nfunction NavSubs() {\r\n    return <Nav>\r\n                <Nav.Item as=\"p\">\r\n                    <NavLink to={ROUTES.popular}>Popular</NavLink>\r\n                </Nav.Item>\r\n                <Nav.Item as=\"p\">\r\n                    <NavLink to={ROUTES.gaming}>Gaming</NavLink>\r\n                </Nav.Item>\r\n                <Nav.Item as=\"p\">\r\n                    <NavLink to={ROUTES.trashy}>Trashy</NavLink>\r\n                </Nav.Item>\r\n            </Nav>\r\n}","import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Main from '../components/Main';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../assets/App.css';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Container>\r\n          <Header />\r\n          <Main />\r\n        </Container>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport commentsReducer from '../features/Comment/commentsSlice';\r\nimport postsReducer from '../features/Post/postsSlice';\r\nimport searchTermReducer from '../features/Search/searchTermSlice';\r\n\r\nconst middleware = getDefaultMiddleware({\r\n  serializableCheck: false\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n    comments: commentsReducer,\r\n    searchTerm: searchTermReducer,\r\n  },\r\n  middleware: middleware,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/index.css';\r\nimport App from './app/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}